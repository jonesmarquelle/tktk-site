import { AnimatePresence, motion } from "framer-motion";
import { type NextPage } from "next";
import Head from "next/head";
import { useRef, useState } from "react";
import VideoInfo from "../components/VideoInfo";
import { trpc } from "../utils/trpc";

enum VideoLoadState {
  Default,
  Loading,
  Loaded,
  Failed
}

const Home: NextPage = () => {
  const testVideo = { name: "Test Guy", username: "@testes", likesCount: 300, commentsCount: 20, sharesCount: 15 };

  const [ state, setState ] = useState(VideoLoadState.Default);
  const [ url, setUrl ] = useState<string>();
  const acRef = useRef<AbortController | null>();

  const utils = trpc.useContext();

  const isState = () => {
    return {
      default:  state === VideoLoadState.Default,
      loading:  state === VideoLoadState.Loading,
      loaded:   state === VideoLoadState.Loaded,
      failed:   state === VideoLoadState.Failed
    }
  }

  const buttonColor = () => {
    return [
      "hover:bg-slate-800", 
      "hover:bg-red-800", 
      "hover:bg-green-800", 
      "hover:bg-violet-800"
    ][state];
  }

  const handleClick = async () => {
    console.log('Download button clicked')
    console.log(`State before click: ${state}`);
    switch (state) {
      case VideoLoadState.Default:
        if (verifyURL(url)) requestVideo();
        break;
      case VideoLoadState.Loading:
        abortVideoDownload();
        break;
      case VideoLoadState.Loaded:
        downloadVideo();
        break;
      case VideoLoadState.Failed:
        resetToDefault();
        break;
    }
  }

  const resetToDefault = () => {
    setUrl(undefined);
    setState(VideoLoadState.Default);
  }

  const verifyURL = (url?: string) => {
    console.log('Verifying URL');
    return !!url && true;
  }

  const abortVideoDownload = () => {
    if (!acRef.current) return;
    console.log('Aborting video request...')
    acRef.current.abort();
    console.log(`Video request aborted, current state: ${state}`);
  }

  const requestVideo = async () => {
    console.log('Sending video request to server');
    
    if (acRef.current) acRef.current.abort();
    acRef.current = new AbortController();
    
    setState(VideoLoadState.Loading);

    try {
      const video = await utils.client.video.getVideo.query({ url }, {signal: acRef.current.signal});
      setState(video ? VideoLoadState.Loaded : VideoLoadState.Failed);
      console.log(`Response: ${video}`);
    } catch (e) {
      console.log('Error requesting video');
      setState(VideoLoadState.Failed);
    }
  }

  const downloadVideo = async () => {
    console.log('Downloading video to client');
    console.log('Video saved!');
    resetToDefault();
    return;
  }

  const updateUrl = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUrl(e.currentTarget.value);
  }

  const buttonVariants = {
    default:  { width: "3rem", borderRadius: "3rem", rotate: 0 },
    loading:  { width: "9rem", borderRadius: "3rem" },
    loaded:   { width: "22.5rem", borderRadius: "1rem" },
    failed:   { width: "3rem", borderRadius: "1rem", rotate: 45 },
  }

  const mainDivVariants = {
    default:  { width: "30rem", height: "3rem" },
    loading:  { height: "1rem" },
    loaded:   { width: "22.5rem", height: "40rem" }
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#ce9595] to-[#35043b] gap-6">
            <AnimatePresence>
              {isState().default && 
                <motion.h1 className="absolute top-64 text-4xl md:text-5xl text-white"
                initial={ false }
                animate={{ opacity: 1 }}
                exit={{ opacity: 0, translateY:"-100"}}>
                  <strong>Tiktok</strong> Video Downloader
                </motion.h1>}
            </AnimatePresence>
            
            <motion.div
            className="bg-neutral-300 shadow-md p-2 gap-2" 
            style={{ borderRadius: "3rem" }}
            initial={{ width: "22.5rem", height: "3rem" }}
            animate={["default", "loading", "loaded"][state]}
            variants={mainDivVariants}>
              {isState().default &&
                <input
                onChange={updateUrl}
                className="w-full h-full bg-transparent text-xl text-center outline-none"
                placeholder="Enter Tiktok URL..."/>
              }
              {isState().loaded &&
                <div className="flex flex-col h-full w-full gap-2">
                  <VideoInfo video={testVideo} />
                  <div className="bg-neutral-500 w-full flex flex-grow rounded-[2.5rem]"/>
                </div>
              }
            </motion.div>
            <motion.button 
              className={`${buttonColor()} bg-neutral-300 shadow-md h-12 text-xl text-neutral-600 hover:text-white hover:shadow-lg transition-colors`}
              onClick={handleClick}
              style={{rotate: 0}}
              animate={["default", "loading", "loaded", "failed"][state]}
              variants={buttonVariants}>
                {isState().default}{/* && <DownloadIcon width={"3rem"} height={"3rem"} className="fill-slate-800 hover:fill-white"/>*/}
                {isState().loading && <span>CANCEL</span>}
                {isState().loaded && <span>DOWNLOAD</span>}
            </motion.button>
      </main>
    </>
  );
};

export default Home;
